// Generated by gencpp from file arna_handle/HandleState.msg
// DO NOT EDIT!


#ifndef ARNA_HANDLE_MESSAGE_HANDLESTATE_H
#define ARNA_HANDLE_MESSAGE_HANDLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arna_handle
{
template <class ContainerAllocator>
struct HandleState_
{
  typedef HandleState_<ContainerAllocator> Type;

  HandleState_()
    : left()
    , right()  {
      left.assign(0.0);

      right.assign(0.0);
  }
  HandleState_(const ContainerAllocator& _alloc)
    : left()
    , right()  {
  (void)_alloc;
      left.assign(0.0);

      right.assign(0.0);
  }



   typedef boost::array<float, 8>  _left_type;
  _left_type left;

   typedef boost::array<float, 8>  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::arna_handle::HandleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arna_handle::HandleState_<ContainerAllocator> const> ConstPtr;

}; // struct HandleState_

typedef ::arna_handle::HandleState_<std::allocator<void> > HandleState;

typedef boost::shared_ptr< ::arna_handle::HandleState > HandleStatePtr;
typedef boost::shared_ptr< ::arna_handle::HandleState const> HandleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arna_handle::HandleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arna_handle::HandleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arna_handle

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'arna_handle': ['/home/ngs/arna.tmpws/src/arna_handle/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arna_handle::HandleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arna_handle::HandleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arna_handle::HandleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arna_handle::HandleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arna_handle::HandleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arna_handle::HandleState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arna_handle::HandleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23088a19e1128164dade1d897d8039d0";
  }

  static const char* value(const ::arna_handle::HandleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23088a19e1128164ULL;
  static const uint64_t static_value2 = 0xdade1d897d8039d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arna_handle::HandleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arna_handle/HandleState";
  }

  static const char* value(const ::arna_handle::HandleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arna_handle::HandleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Each handle should have eight sensors, connected to the custom\n\
# Arduino hat as pins A0-A7 (left handle) and pins A8-A15 (right\n\
# handle)\n\
float32[8] left\n\
float32[8] right\n\
";
  }

  static const char* value(const ::arna_handle::HandleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arna_handle::HandleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arna_handle::HandleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arna_handle::HandleState_<ContainerAllocator>& v)
  {
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left[i]);
    }
    s << indent << "right[]" << std::endl;
    for (size_t i = 0; i < v.right.size(); ++i)
    {
      s << indent << "  right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARNA_HANDLE_MESSAGE_HANDLESTATE_H
